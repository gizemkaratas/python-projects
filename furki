import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import LocalOutlierFactor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
df = pd.read_csv("SampleSales.csv")
def veri_inceleme(df):
    print("\nDataframe'in ilk 5 tanesi")
    print(df.head())
    print("\n\nDataframe'in columnları")
    print(df.columns)
    print("\n\nDataframe hakkında istatistiksel bilgi")
    print(df.describe())
    print("/Column Sayısı:")
    print(df.shape)
    print("\n\nDataframe hakkındaki bilgileri verir")
    print(df.info())
    print("\n\nDataframe'deki boş girilen hücreleri gösterir")
    print(df.isnull().sum())
veri_inceleme(df)
df=df[['ItemID',"year","WeekIdentifier","NewBasePrice",
       "TotalInventory","SalesQuantity","InboundInventory","ProjectedInventory"]]
def korelasyon_inceleme(df):
    # Korelasyon matrisini hesaplama
    correlation_matrix = df.corr()
    highest_correlations = correlation_matrix.unstack().sort_values(ascending=False)
    highest_correlations = highest_correlations[(highest_correlations > 0) & (highest_correlations < 1)]
    print("En Yüksek Korelasyonlar:")
    print(highest_correlations)

    # Korelasyon matrisini görüntüleme
    print("\nKorelasyon Matrisi:")
    print(correlation_matrix, "\n\n")
    correlation_matrix['ProjectedInventory'].sort_values(ascending=False)
korelasyon_inceleme(df)
print(df)
def outlier_inceleme(df):
    # Local Outlier Factor (LOF) modelini oluşturma
    lof_model = LocalOutlierFactor(n_neighbors=20, contamination=0.1)  # Parametreler isteğe göre ayarlanabilir

    # LOF modelini veri setine uygulama
    outlier_scores = lof_model.fit_predict(df)

    # Aykırı değerlerin indekslerini alma
    outliers_index = df.index[outlier_scores == -1]

    # Aykırı değerleri medyan değer ile değiştirme
    df_corrected = df.copy()
    for column in df.columns:
        mean_value = df[column].median()
        df_corrected.loc[outliers_index, column] = mean_value

    # Aykırı değerleri düzeltilmiş veriyi görüntüleme
    print("Aykırı Değerler Düzeltildi:")
    print(df_corrected.loc[outliers_index])
    return df_corrected
outlier_inceleme(df)
def scaler_uygulama(df):
    # Standartlaştırma işlemi için StandardScaler kullanma
    scaler = StandardScaler()

    num_columns = ['ItemID',"year","WeekIdentifier","NewBasePrice",
       "TotalInventory","SalesQuantity","InboundInventory","ProjectedInventory"]
    scaled_features = scaler.fit_transform(df[num_columns])

    # Standartlaştırılmış veriyi DataFrame'e dönüştürme
    df_scaled = pd.DataFrame(scaled_features, columns=['ItemID_scaled',"year_scaled","WeekIdentifier_scaled","NewBasePrice_scaled",
       "TotalInventory_scaled","SalesQuantity_scaled","InboundInventory_scaled","ProjectedInventory_scaled"])

    # Standartlaştırılmış veriyi görüntüleme
    print("Standartlaştırılmış Veri:")
    print(df_scaled.head())
    df = pd.concat([df, df_scaled], axis=1)
    df = df.drop(num_columns, axis=1)
    return df
scaler_uygulama(df)
from statsmodels.tsa.arima.model import ARIMA

def optimum_stok_tahmini_arima(df, item_id, date_str):
    # Belirtilen ürün ve tarih bilgisine göre veriyi filtreleme
    filtered_df = df[(df['ItemID'] == item_id) & (df['year'] == pd.to_datetime(date_str).year)]

    # ARIMA modeli için gerekli sütunları seçme (örneğin, burada SalesQuantity kullanıyoruz)
    arima_series = filtered_df.set_index('WeekIdentifier')['SalesQuantity']

    # ARIMA modelini oluşturma ve eğitme
   
# Farklı ARIMA kombinasyonlarını deneyelim
    for p in range(3):
        for d in range(2):
            for q in range(3):
                try:
                    model = ARIMA(date, order=(p, d, q))
                    model_fit = model.fit()
                    print(f"ARIMA({p}, {d}, {q}) - AIC: {model_fit.aic}")
                except:
                    continue

    # Gelecek tahminleri oluşturma
    forecast = model_fit.forecast()  # 4 haftalık bir tahmin yapalım

    # Tahmin edilen stok miktarını alarak optimum stok miktarını bulma
    optimum_stock = forecast[-1]  # Son tahmin edilen değeri alıyoruz
    return optimum_stock

# Kullanıcıdan ürün kimliği (ItemID) ve tarih bilgisini alma
item_id = input("Ürün Kimliği (ItemID) giriniz: ")
date_str = input("Tarih (GG.AA.YYYY) giriniz: ")

optimum_stock_arima = optimum_stok_tahmini_arima(df, item_id, date_str)
print(f"ARIMA ile Tahmin Edilen Optimum Stok Miktarı: {optimum_stock_arima}")
# Lineer regresyon modeli oluşturma ve eğitme
from sklearn.linear_model import LinearRegression


def linearRegression(df):
    X = df.drop(columns=['ProjectedInventory'])
    y = df["ProjectedInventory"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Modelin doğruluk oranlarını yazdırma
    train_accuracy = model.score(X_train, y_train)
    test_accuracy = model.score(X_test, y_test)

    print("\nEğitim seti doğruluk skoru:", train_accuracy)
    print("Test seti doğruluk skoru:", test_accuracy)
linearRegression(df)
